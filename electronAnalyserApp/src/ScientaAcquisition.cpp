static const char *RcsId = "$Header: /cvsroot-fuse/tango-ds/InputOutput/ScientaAcquisition/src/ScientaAcquisition.cpp,v 1.23 2010/04/06 13:59:58 abeilleg Exp $";
//+=============================================================================
//
// file :         ScientaAcquisition.cpp
//
// description :  C++ source for the ScientaAcquisition and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                ScientaAcquisition are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author: abeilleg $
//
// $Revision: 1.23 $
//
// $Log: ScientaAcquisition.cpp,v $
// Revision 1.23  2010/04/06 13:59:58  abeilleg
// minor change
//
// Revision 1.22  2010/03/31 11:19:57  abeilleg
// merge with NO MFC
//
// Revision 1.21  2010/03/30 16:10:40  abeilleg
// merge with NO MFC
//
// Revision 1.20.2.4  2010/03/30 15:08:51  abeilleg
// merge with main branch
//
// Revision 1.20.2.3  2010/03/30 15:02:53  abeilleg
// correction for ADCMode type
//
// Revision 1.20.2.2  2010/03/23 11:28:35  buteau
// - relecture de code
// modifs mineures, quelques leaks potentiels corrigés
//
// Revision 1.20.2.1  2010/03/17 08:57:15  abeilleg
// new version with new gammadata wrapper
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name       |  Method name
//	----------------------------------------
//  State              |  dev_state()
//  Status             |  dev_status()
//  Start              |  start()
//  Stop               |  stop()
//  ResetInstrument    |  reset_instrument()
//  ResetSupplies      |  reset_supplies()
//  TestCommunication  |  test_communication()
//  GetHardwareInfo    |  get_hardware_info()
//  GetLensModeList    |  get_lens_mode_list()
//  GetPassEnergyList  |  get_pass_energy_list()
//  GetPassModeList    |  get_pass_mode_list()
//
//===================================================================


#include <tango.h>
#include <ScientaAcquisition.h>
#include <ScientaAcquisitionClass.h>
#include <types.h>
#include <sestypes.h>
#include <werror.h>
#include "PogoHelper.h"



namespace ScientaAcquisition_ns
{

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::ScientaAcquisition(string &s)
	// 
	// description : 	constructor for simulated ScientaAcquisition
	//
	// in : - cl : Pointer to the DeviceClass object
	//      - s : Device name 
	//
	//-----------------------------------------------------------------------------
	ScientaAcquisition::ScientaAcquisition(Tango::DeviceClass *cl,string &s)
		:Tango::Device_3Impl(cl,s.c_str())
	{
		init_device();
	}

	ScientaAcquisition::ScientaAcquisition(Tango::DeviceClass *cl,const char *s)
		:Tango::Device_3Impl(cl,s)
	{
		init_device();
	}

	ScientaAcquisition::ScientaAcquisition(Tango::DeviceClass *cl,const char *s,const char *d)
		:Tango::Device_3Impl(cl,s,d)
	{
		init_device();
	}
	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::delete_device()
	// 
	// description : 	will be called at device destruction or at init command.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::delete_device()
	{
		//	Delete device's allocated object
		if(ses)
		{
			ses->finalize();
			delete ses;
		}

		DELETE_DEVSTRING_ATTRIBUTE(attr_lensMode_read);
		DELETE_DEVSTRING_ATTRIBUTE(attr_passMode_read);
		DELETE_DEVSTRING_ATTRIBUTE(attr_energyScale_read);
		DELETE_DEVSTRING_ATTRIBUTE(attr_mode_read);

		if(attr_channels_read){
			delete	attr_channels_read ;
		}
		if(attr_slices_read){
			delete attr_slices_read;
		}
		if(attr_sweeps_read){
			delete attr_sweeps_read;
		}
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::init_device()
	// 
	// description : 	will be called at device initialization.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::init_device()
	{
		INFO_STREAM << "ScientaAcquisition::ScientaAcquisition() create device " << device_name << endl;

		CREATE_DEVSTRING_ATTRIBUTE(attr_lensMode_read,200,"");
		CREATE_DEVSTRING_ATTRIBUTE(attr_passMode_read,200,"");
		CREATE_DEVSTRING_ATTRIBUTE(attr_energyScale_read,200,"");
		CREATE_DEVSTRING_ATTRIBUTE(attr_mode_read,200,"");

		attr_channels_read = new Tango::DevLong();
		attr_slices_read= new Tango::DevLong();
		attr_sweeps_read= new Tango::DevLong();
		// Initialise variables to default values
		//--------------------------------------------
		get_device_property();

		// Get connection to the SES wrapper
		ses = new WSESWrapperMain(sesRootDirectory.c_str());
		int err = ses->initialize(0);
		if(err)
		{
			this->set_state(Tango::FAULT);
			this->set_status("SES library initialisation failed");
		}
		else
		{
			err = ses->loadInstrument(instrumentFilePath.c_str());
			if(err)
			{
				this->set_state(Tango::FAULT);
				this->set_status("LoadInstrument file :" +instrumentFilePath + " failed " );
			}
			else
			{
				if(ses->isInitialized())
				{
					this->set_state(Tango::STANDBY);
				}
				else
				{
					this->set_state(Tango::FAULT);
					this->set_status("SES to isInitialized failed");
				}
			}
		}
		INFO_STREAM << "ScientaAcquisition::ScientaAcquisition() init_device - out "<< endl;

	}


	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::get_device_property()
	// 
	// description : 	Read the device properties from database.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::get_device_property()
	{
		//	Initialize your default values here (if not done with  POGO).
		//------------------------------------------------------------------

		//	Read device properties from database.(Automatic code generation)
		//------------------------------------------------------------------
		Tango::DbData	dev_prop;
		dev_prop.push_back(Tango::DbDatum("SesRootDirectory"));
		dev_prop.push_back(Tango::DbDatum("InstrumentFilePath"));

		//	Call database and extract values
		//--------------------------------------------
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
		Tango::DbDatum	def_prop, cl_prop;
		ScientaAcquisitionClass	*ds_class =
			(static_cast<ScientaAcquisitionClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize SesRootDirectory from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  sesRootDirectory;
		else {
			//	Try to initialize SesRootDirectory from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  sesRootDirectory;
		}
		//	And try to extract SesRootDirectory value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sesRootDirectory;

		//	Try to initialize InstrumentFilePath from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  instrumentFilePath;
		else {
			//	Try to initialize InstrumentFilePath from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  instrumentFilePath;
		}
		//	And try to extract InstrumentFilePath value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  instrumentFilePath;



		//	End of Automatic code generation
		//------------------------------------------------------------------

	}
	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::always_executed_hook()
	// 
	// description : 	method always executed before any command is executed
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::always_executed_hook()
	{
		int status=0;
		int err = ses->getProperty("instrument_status", 0, &status);
		if(err!=0)
		{
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::always_executed_hook");
		}
		switch(status)
		{
		case SesNS::Normal:
			this->set_state(Tango::STANDBY);
			break;
		case  SesNS::Running:
			this->set_state(Tango::RUNNING);
			break;
		case  SesNS::AcqError :
			this->set_state(Tango::FAULT);
			break;
		case SesNS::NonOperational:
			this->set_state(Tango::FAULT);
			break;
		case SesNS::NotInitialized :
			this->set_state(Tango::FAULT);
			break;
		}

		int steps = 0;
		int dummy = 0;
		ses->getAcquiredData("acq_current_step", 0, &steps,dummy);

		int channels = 0;
		ses->getAcquiredData("acq_channels", 0, &channels,dummy);
		if(steps>channels){
			steps = channels;
		}
		TangoSys_OMemStream status_stream;
		status_stream
			<<"Current step: "<<endl<<steps
			<<"/"<<channels<<endl
			<<ends; 

		this->set_status(status_stream.str());

	}
	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_attr_hardware
	// 
	// description : 	Hardware acquisition for attributes.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_attr_hardware(vector<long> &attr_list)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
		//	Add your own code here
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_excitationEnergy
	// 
	// description : 	Extract real attribute values for excitationEnergy acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_excitationEnergy(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_excitationEnergy(Tango::Attribute &attr) entering... "<< endl;
		double kineticEnergy = 0;
		int err = ses->getKineticEnergy(&kineticEnergy);
		if(err!=0){
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::read_excitationEnergy");
		}
		attr.set_value(&kineticEnergy);

	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_excitationEnergy
	// 
	// description : 	Write excitationEnergy attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_excitationEnergy(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_excitationEnergy(Tango::WAttribute &attr) entering... "<< endl;
		double kineticEnergy = 0;
		attr.get_write_value(kineticEnergy);
		int err =  ses->setKineticEnergy(kineticEnergy);
		if(err!=0)
		{
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::write_excitationEnergy");
		}

	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_mode
	// 
	// description : 	Extract real attribute values for mode acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_mode(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_mode(Tango::Attribute &attr) entering... "<< endl;
		string attr_mode ;
		if(analyzer.fixed_)
		{
			attr_mode= "Fixed";
		}
		else
		{
			attr_mode = "Swept";	 
		}
		strcpy(*attr_mode_read ,attr_mode.c_str());
		attr.set_value(attr_mode_read);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_mode
	// 
	// description : 	Write mode attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_mode(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_mode(Tango::WAttribute &attr) entering... "<< endl;
		attr.get_write_value(attr_mode_write);
		if(string(attr_mode_write) == "Fixed")
		{
			analyzer.fixed_ = true;
		}
		else
		{
			analyzer.fixed_ = false;
		}
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_energyScale
	// 
	// description : 	Extract real attribute values for energyScale acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_energyScale(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_energyScale(Tango::Attribute &attr) entering... "<< endl;
		//FIXME: waiting for availabilty in wrapper see MANTIS 15320
		DEBUG_STREAM << "Not implemented within the GammaData wrapper "<< endl;
		/*string	attr_energyScale;
		if(){
		attr_energyScale = "Kinetic";
		}
		else{
		attr_energyScale = "Binding";
		}

		attr.set_value(&attr_energyScale);*/
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_energyScale
	// 
	// description : 	Write energyScale attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_energyScale(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_energyScale(Tango::WAttribute &attr) entering... "<< endl;
		//FIXME: waiting for availabilty in wrapper see MANTIS 15320
		DEBUG_STREAM << "Not implemented within the GammaData wrapper "<< endl;
		Tango::Except::throw_exception (
			(const char *)"DRIVER_FAILURE",
			(const char *) "Not implemented within the GammaData wrapper ",
			(const char *)"ScientaAcquisition::write_energyScale");

	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_highEnergy
	// 
	// description : 	Extract real attribute values for highEnergy acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_highEnergy(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_highEnergy(Tango::Attribute &attr) entering... "<< endl;
		attr.set_value(&analyzer.highEnergy_);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_highEnergy
	// 
	// description : 	Write highEnergy attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_highEnergy(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_highEnergy(Tango::WAttribute &attr) entering... "<< endl;
		attr.get_write_value(analyzer.highEnergy_);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_lowEnergy
	// 
	// description : 	Extract real attribute values for lowEnergy acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_lowEnergy(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_lowEnergy(Tango::Attribute &attr) entering... "<< endl;
		attr.set_value(&analyzer.lowEnergy_);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_lowEnergy
	// 
	// description : 	Write lowEnergy attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_lowEnergy(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_lowEnergy(Tango::WAttribute &attr) entering... "<< endl;
		attr.get_write_value(analyzer.lowEnergy_);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_fixEnergy
	// 
	// description : 	Extract real attribute values for fixEnergy acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_fixEnergy(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_fixEnergy(Tango::Attribute &attr) entering... "<< endl;
		attr.set_value(&analyzer.centerEnergy_);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_fixEnergy
	// 
	// description : 	Write fixEnergy attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_fixEnergy(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_fixEnergy(Tango::WAttribute &attr) entering... "<< endl;
		attr.get_write_value(analyzer.centerEnergy_);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_energyStep
	// 
	// description : 	Extract real attribute values for energyStep acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_energyStep(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_energyStep(Tango::Attribute &attr) entering... "<< endl;
		attr.set_value(&analyzer.energyStep_);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_energyStep
	// 
	// description : 	Write energyStep attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_energyStep(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_energyStep(Tango::WAttribute &attr) entering... "<< endl;
		attr.get_write_value(analyzer.energyStep_);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_stepTime
	// 
	// description : 	Extract real attribute values for stepTime acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_stepTime(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_stepTime(Tango::Attribute &attr) entering... "<< endl;
		double test =analyzer.dwellTime_;
		attr.set_value(&test);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_stepTime
	// 
	// description : 	Write stepTime attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_stepTime(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_stepTime(Tango::WAttribute &attr) entering... "<< endl;
		double test =0;
		attr.get_write_value(test);
		analyzer.dwellTime_ = (int) test;
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_lensMode
	// 
	// description : 	Extract real attribute values for lensMode acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_lensMode(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_lensMode(Tango::Attribute &attr) entering... "<< endl;
		char* lensMode =0;
		int size =0;
		int err = ses->getProperty("lens_mode", 0, lensMode, size);
		if(err!=0){
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::read_lensMode");
		}
		lensMode = new char[size];
		err = ses->getProperty("lens_mode", 0, lensMode, size);
		if(err!=0)
		{
			delete [] lensMode;
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::read_lensMode");
		}
		strncpy(*attr_lensMode_read ,lensMode, size);
		attr.set_value(attr_lensMode_read);                                                                                      
		delete [] lensMode;
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_lensMode
	// 
	// description : 	Write lensMode attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_lensMode(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_lensMode(Tango::WAttribute &attr) entering... "<< endl;

		attr.get_write_value(attr_lensMode_write);
		int err = ses->setProperty("lens_mode", 0, attr_lensMode_write);
		if(err!=0)
		{
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::write_lensMode");
		}
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_passEnergy
	// 
	// description : 	Extract real attribute values for passEnergy acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_passEnergy(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_passEnergy(Tango::Attribute &attr) entering... "<< endl;
		double pass_energy=0;
		int err = ses->getProperty("pass_energy", 0, &pass_energy);
		if(err!=0)
		{
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::read_passEnergy");
		}
		attr.set_value(&pass_energy);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_passEnergy
	// 
	// description : 	Write passEnergy attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_passEnergy(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_passEnergy(Tango::WAttribute &attr) entering... "<< endl;
		double pass_energy=0;
		attr.get_write_value(pass_energy);

		int err = ses->setProperty("pass_energy", 0,&pass_energy);
		if(err!=0)
		{
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::write_passEnergy");
		}
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_passMode
	// 
	// description : 	Extract real attribute values for passMode acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_passMode(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_passMode(Tango::Attribute &attr) entering... "<< endl;
		char* passMode =0;
		int size =0;
		int err = ses->getProperty("element_set", 0, passMode, size);
		if(err!=0)
		{
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::read_passMode");
		}
		passMode = new char[size];
		err = ses->getProperty("element_set", 0, passMode, size);
		if(err!=0)
		{
			delete [] passMode;
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::read_passMode");
		}
		strncpy(*attr_passMode_read ,passMode, size);
		attr.set_value(attr_passMode_read);                                                                                      
		delete [] passMode;
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_passMode
	// 
	// description : 	Write passMode attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_passMode(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_passMode(Tango::WAttribute &attr) entering... "<< endl;
		attr.get_write_value(attr_passMode_write);
		int err = ses->setProperty("element_set", 0, attr_passMode_write);
		if(err!=0){
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::read_passMode");
		}
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_detectorFirstXChannel
	// 
	// description : 	Extract real attribute values for detectorFirstXChannel acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_detectorFirstXChannel(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_detectorFirstXChannel(Tango::Attribute &attr) entering... "<< endl;
		Tango::DevShort temp = detector.firstXChannel_;
		attr.set_value(&temp);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_detectorFirstXChannel
	// 
	// description : 	Write detectorFirstXChannel attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_detectorFirstXChannel(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_detectorFirstXChannel(Tango::WAttribute &attr) entering... "<< endl;
		Tango::DevShort val = 0;
		attr.get_write_value(val);
		detector.firstXChannel_ = val;
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_detectorLastXChannel
	// 
	// description : 	Extract real attribute values for detectorLastXChannel acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_detectorLastXChannel(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_detectorLastXChannel(Tango::Attribute &attr) entering... "<< endl;
		Tango::DevShort temp = detector.lastXChannel_;
		attr.set_value(&temp);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_detectorLastXChannel
	// 
	// description : 	Write detectorLastXChannel attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_detectorLastXChannel(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_detectorLastXChannel(Tango::WAttribute &attr) entering... "<< endl;
		Tango::DevShort val = 0;
		attr.get_write_value(val);
		detector.lastXChannel_ = val;
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_detectorFirstYChannel
	// 
	// description : 	Extract real attribute values for detectorFirstYChannel acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_detectorFirstYChannel(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_detectorFirstYChannel(Tango::Attribute &attr) entering... "<< endl;
		Tango::DevShort temp = detector.firstYChannel_;
		attr.set_value(&temp);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_detectorFirstYChannel
	// 
	// description : 	Write detectorFirstYChannel attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_detectorFirstYChannel(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_detectorFirstYChannel(Tango::WAttribute &attr) entering... "<< endl;
		Tango::DevShort val = 0;
		attr.get_write_value(val);
		detector.firstYChannel_ = val;
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_detectorLastYChannel
	// 
	// description : 	Extract real attribute values for detectorLastYChannel acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_detectorLastYChannel(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_detectorLastYChannel(Tango::Attribute &attr) entering... "<< endl;
		Tango::DevShort temp = detector.lastYChannel_;
		attr.set_value(&temp);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_detectorLastYChannel
	// 
	// description : 	Write detectorLastYChannel attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_detectorLastYChannel(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_detectorLastYChannel(Tango::WAttribute &attr) entering... "<< endl;
		Tango::DevShort val = 0;
		attr.get_write_value(val);
		detector.lastYChannel_ = val;
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_detectorSlices
	// 
	// description : 	Extract real attribute values for detectorSlices acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_detectorSlices(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_detectorSlices(Tango::Attribute &attr) entering... "<< endl;
		Tango::DevShort val =detector.slices_ ;
		attr.set_value(&val);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_detectorSlices
	// 
	// description : 	Write detectorSlices attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_detectorSlices(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_detectorSlices(Tango::WAttribute &attr) entering... "<< endl;
		Tango::DevShort val = 0;
		attr.get_write_value(val);
		detector.slices_= val;
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_ADCMode
	// 
	// description : 	Extract real attribute values for ADCMode acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_ADCMode(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_ADCMode(Tango::Attribute &attr) entering... "<< endl;
		if(detector.adcMode_){
			Tango::DevShort s = 1;
			attr.set_value(&s);
		}else{
				Tango::DevShort s = 0;
			attr.set_value(&s);
		}
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_ADCMode
	// 
	// description : 	Write ADCMode attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_ADCMode(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_ADCMode(Tango::WAttribute &attr) entering... "<< endl;
		Tango::DevShort s; 
		attr.get_write_value(s);
		if(s==0){
		detector.adcMode_ = false;
		}
		else{
			detector.adcMode_ = true;
		}
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_ADCMask
	// 
	// description : 	Extract real attribute values for ADCMask acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_ADCMask(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_ADCMask(Tango::Attribute &attr) entering... "<< endl;
		//FIXME: waiting for availabilty in wrapper see MANTIS 15320
		DEBUG_STREAM << "Not implemented within the GammaData wrapper "<< endl;

	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_ADCMask
	// 
	// description : 	Write ADCMask attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_ADCMask(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_ADCMask(Tango::WAttribute &attr) entering... "<< endl;
		//FIXME: waiting for availabilty in wrapper see MANTIS 15320
		DEBUG_STREAM << "Not implemented within the GammaData wrapper "<< endl;

		Tango::Except::throw_exception (
			(const char *)"DRIVER_FAILURE",
			(const char *) "Not implemented within the GammaData wrapper ",
			(const char *)"ScientaAcquisition::write_ADCMask");

	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_discriminatorLevel
	// 
	// description : 	Extract real attribute values for discriminatorLevel acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_discriminatorLevel(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_discriminatorLevel(Tango::Attribute &attr) entering... "<< endl;
		//FIXME: waiting for availabilty in wrapper see MANTIS 15320
		DEBUG_STREAM << "Not implemented within the GammaData wrapper "<< endl;
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::write_discriminatorLevel
	// 
	// description : 	Write discriminatorLevel attribute values to hardware.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::write_discriminatorLevel(Tango::WAttribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::write_discriminatorLevel(Tango::WAttribute &attr) entering... "<< endl;
		//FIXME: waiting for availabilty in wrapper see MANTIS 15320
		DEBUG_STREAM << "Not implemented within the GammaData wrapper "<< endl;

		Tango::Except::throw_exception (
			(const char *)"DRIVER_FAILURE",
			(const char *) "Not implemented within the GammaData wrapper ",
			(const char *)"ScientaAcquisition::write_discriminatorLevel");
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_channels
	// 
	// description : 	Extract real attribute values for channels acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_channels(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_channels(Tango::Attribute &attr) entering... "<< endl;
		int channels = 0;
		int dummy = 0;
		ses->getAcquiredData("acq_channels", 0, &channels,dummy);
		//TODO error
		//XXX don't know why but need to pass by a pointer
		(*attr_channels_read) = channels;
		attr.set_value(attr_channels_read);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_slices
	// 
	// description : 	Extract real attribute values for slices acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_slices(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_slices(Tango::Attribute &attr) entering... "<< endl;
		int value = 0;
		int dummy = 0;
		ses->getAcquiredData("acq_slices", 0, &value,dummy);
		//TODO error
		//XXX don't know why but need to pass by a pointer
		(*attr_slices_read) = value;
		attr.set_value(attr_slices_read);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_sweeps
	// 
	// description : 	Extract real attribute values for sweeps acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_sweeps(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_sweeps(Tango::Attribute &attr) entering... "<< endl;
		int value = 0;
		int dummy = 0;
		ses->getAcquiredData("acq_iterations", 0, &value,dummy);
		//TODO error
		//XXX don't know why but need to pass by a pointer
		(*attr_sweeps_read) = value;
		attr.set_value(attr_sweeps_read);
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_channelScale
	// 
	// description : 	Extract real attribute values for channelScale acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_channelScale(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_channelScale(Tango::Attribute &attr) entering... "<< endl;
		int channels = 0;
		int dummy = 0;
		ses->getAcquiredData("acq_channels", 0, &channels,dummy);
		double *spectrum = new double[channels];

		int err = ses->getAcquiredData("acq_channel_scale", 0, spectrum, channels);
		if(err!=0){
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::read_channelScale");
		}
		attr.set_value(spectrum, channels,0,true);
		//delete spectrum;  // delete is done by the set_value method
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_sliceScale
	// 
	// description : 	Extract real attribute values for sliceScale acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_sliceScale(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_sliceScale(Tango::Attribute &attr) entering... "<< endl;

		int dummy = 0;
		int slices = 0;
		ses->getAcquiredData("acq_slices", 0, &slices,dummy);
		double *spectrum = new double[slices];

		int err = ses->getAcquiredData("acq_slice_scale", 0, spectrum, slices);
	
		if(err!=0)
		{
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::read_sliceScale");
		}

		attr.set_value(spectrum, slices,0,true);
		//delete spectrum;// delete is done by the set_value method
	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_sumData
	// 
	// description : 	Extract real attribute values for sumData acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_sumData(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_sumData(Tango::Attribute &attr) entering... "<< endl;
		int channels = 0;
		int dummy = 0;
		ses->getAcquiredData("acq_channels", 0, &channels,dummy);
		double *spectrum = new double[channels];

		int err = ses->getAcquiredData("acq_spectrum", 0, spectrum, channels);
		if(err!=0){
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::read_sumData");
		}
		attr.set_value(spectrum, channels,0,true);

		//	delete spectrum;

	}

	//+----------------------------------------------------------------------------
	//
	// method : 		ScientaAcquisition::read_data
	// 
	// description : 	Extract real attribute values for data acquisition result.
	//
	//-----------------------------------------------------------------------------
	void ScientaAcquisition::read_data(Tango::Attribute &attr)
	{
		DEBUG_STREAM << "ScientaAcquisition::read_data(Tango::Attribute &attr) entering... "<< endl;
		int channels = 0;
		int dummy = 0;
		ses->getAcquiredData("acq_channels", 0, &channels,dummy);
		int slices = 0;
		ses->getAcquiredData("acq_slices", 0, &slices,dummy);
		double *data = new double[channels*slices];
		int size = slices*channels;
		int error = ses->getAcquiredData("acq_image", 0, data, size);
		//true for delete data array
		attr.set_value(data, channels,slices, true);
	}

	//+------------------------------------------------------------------
	/**
	*	method:	ScientaAcquisition::start
	*
	*	description:	method to execute "Start"
	*	Start the acqusition for one region with parameters configured in the attributes.
	*
	*
	*/
	//+------------------------------------------------------------------
	void ScientaAcquisition::start()
	{
		DEBUG_STREAM << "ScientaAcquisition::start(): entering... !" << endl;

		// set acquisition parameters on the wrapper
		ses->setProperty("detector_region", 0, &detector);
		ses->setProperty("analyzer_region", 0, &analyzer);
	
		int err = ses->initAcquisition(false, false);
		if(err!=0){
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::start");
		}

		err = ses->startAcquisition();
		this->set_state(Tango::RUNNING);
		if(err!=0)
		{
			this->set_status("error start");
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::start");
		}
	}

	//+------------------------------------------------------------------
	/**
	*	method:	ScientaAcquisition::stop
	*
	*	description:	method to execute "Stop"
	*	Stop the current acquisition.
	*
	*
	*/
	//+------------------------------------------------------------------
	void ScientaAcquisition::stop()
	{
		DEBUG_STREAM << "ScientaAcquisition::stop(): entering... !" << endl;
		int err = ses->stopAcquisition();
		if(err!=0)
		{
			this->set_status("error start");
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::stop");
		}
		this->set_state(Tango::STANDBY);

	}

	//+------------------------------------------------------------------
	/**
	*	method:	ScientaAcquisition::reset_instrument
	*
	*	description:	method to execute "ResetInstrument"
	*	Reset instrument.
	*
	*
	*/
	//+------------------------------------------------------------------
	void ScientaAcquisition::reset_instrument()
	{
		DEBUG_STREAM << "ScientaAcquisition::reset_instrument(): entering... !" << endl;
		int err =ses->resetHW();
		if(err!=0)
		{
			this->set_status("error reset ");
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::reset_instrument");
		}
	}

	//+------------------------------------------------------------------
	/**
	*	method:	ScientaAcquisition::reset_supplies
	*
	*	description:	method to execute "ResetSupplies"
	*	Reset supplies.
	*
	*
	*/
	//+------------------------------------------------------------------
	void ScientaAcquisition::reset_supplies()
	{
		DEBUG_STREAM << "ScientaAcquisition::reset_supplies(): entering... !" << endl;

		int err =ses->zeroSupplies();
		if(err!=0)
		{
			this->set_status("error reset_supplies ");
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::reset_supplies");
		}
	}

	//+------------------------------------------------------------------
	/**
	*	method:	ScientaAcquisition::test_communication
	*
	*	description:	method to execute "TestCommunication"
	*	Test communication with hardware.
	*
	*
	*/
	//+------------------------------------------------------------------
	void ScientaAcquisition::test_communication()
	{
		DEBUG_STREAM << "ScientaAcquisition::test_communication(): entering... !" << endl;

		int err = ses->testHW();
	if(err!=0)
		{
			this->set_status("error test_communication ");
			string msg = WError::instance()->message(err);
			Tango::Except::throw_exception (
				(const char *)"DRIVER_FAILURE",
				(const char *) msg.c_str(),
				(const char *)"ScientaAcquisition::test_communication");
		}
	}

	//+------------------------------------------------------------------
	/**
	*	method:	ScientaAcquisition::get_hardware_info
	*
	*	description:	method to execute "GetHardwareInfo"
	*	Retrieve hardware informations.
	*
	* @return	A decription of the hardware
	*
	*/
	//+------------------------------------------------------------------
	Tango::DevString ScientaAcquisition::get_hardware_info()
	{
		//	POGO has generated a method core with argout allocation.
		//	If you would like to use a static reference without copying,
		//	See "TANGO Device Server Programmer's Manual"
		//		(chapter : Writing a TANGO DS / Exchanging data)
		//------------------------------------------------------------

		DEBUG_STREAM << "ScientaAcquisition::get_hardware_info(): entering... !" << endl;

		ses->getProperty("detector_info", 0, &info);

		TangoSys_OMemStream argout_stream;

		argout_stream<<
			//"Instrument Model: "<<ptr_ScientaMFC.instrument_info.Model<<endl<<
			//&ptr_ScientaMFC.instrument_info.Model[1]<<endl<< //unrelevant charater in [0]
			//"Instrument SerialNo: "<<ptr_ScientaMFC.instrument_info.SerialNo<<endl<<
			//&ptr_ScientaMFC.instrument_info.SerialNo[1]<<endl<< //unrelevant charater in [0]
			//"Detector Name: "<<ptr_ScientaMFC.detector_info.Name<<endl<<
			//&ptr_ScientaMFC.detector_info.Name[1]<<endl<< //unrelevant charater in [0]
			"Detector TimerControlled: "<<info.timerControlled_<<endl<<
			"Detector XChannels: "<<info.xChannels_<<endl<<
			"Detector YChannels: "<<info.yChannels_<<endl<<
			"Detector MaxSlices: "<<info.maxSlices_<<endl<<
			"Detector MaxChannels: "<<info.maxChannels_<<endl<<
			"Detector FramesPerSec: "<<info.frameRate_<<endl<<
			"Detector ADCPresent: "<<info.adcPresent_<<endl<<
			"Detector DiscPresent: "<<info.discPresent_<<ends;

		Tango::DevString	argout	= new char[argout_stream.str().length()+1];

		strcpy(argout, argout_stream.str().c_str());

		return argout;
	}

	//+------------------------------------------------------------------
	/**
	*	method:	ScientaAcquisition::get_lens_mode_list
	*
	*	description:	method to execute "GetLensModeList"
	*
	* @return	The list of possible lens modes
	*
	*/
	//+------------------------------------------------------------------
	Tango::DevVarStringArray *ScientaAcquisition::get_lens_mode_list()
	{
		//	POGO has generated a method core with argout allocation.
		//	If you would like to use a static reference without copying,
		//	See "TANGO Device Server Programmer's Manual"
		//		(chapter : Writing a TANGO DS / Exchanging data)
		//------------------------------------------------------------
		Tango::DevVarStringArray	*argout  = new Tango::DevVarStringArray();

		DEBUG_STREAM << "ScientaAcquisition::get_lens_mode_list(): entering... !" << endl;

		int max =0;
		ses->getProperty("lens_mode_count",0,&max);
		argout->length(max);

		for(int i=0; i<max;i++)
		{
			char* lens = 0;
			int size  = 0;
			int err = ses->getProperty("lens_mode_from_index", i, lens, size);
			if(err!=0){
				string msg = WError::instance()->message(err);
				Tango::Except::throw_exception (
					(const char *)"DRIVER_FAILURE",
					(const char *) msg.c_str(),
					(const char *)"ScientaAcquisition::get_lens_mode_list");
			}
			lens =  new char[size];
			err = ses->getProperty("lens_mode_from_index",i,lens, size);
			if(err!=0)
			{
				delete [] lens;
				string msg = WError::instance()->message(err);
				Tango::Except::throw_exception (
					(const char *)"DRIVER_FAILURE",
					(const char *) msg.c_str(),
					(const char *)"ScientaAcquisition::get_pass_mode_list");
			}
			cout << "get_lens_mode_list - lens " << lens[0] << endl;
			(*argout)[i] = CORBA::string_dup(lens);
			delete [] lens;
		}
		return argout;
	}

	//+------------------------------------------------------------------
	/**
	*	method:	ScientaAcquisition::get_pass_mode_list
	*
	*	description:	method to execute "GetPassModeList"
	*
	* @return	The possible values for Pass Modes
	*
	*/
	//+------------------------------------------------------------------
	Tango::DevVarStringArray *ScientaAcquisition::get_pass_mode_list()
	{
		//	POGO has generated a method core with argout allocation.
		//	If you would like to use a static reference without copying,
		//	See "TANGO Device Server Programmer's Manual"
		//		(chapter : Writing a TANGO DS / Exchanging data)
		//------------------------------------------------------------
		Tango::DevVarStringArray	*argout  = new Tango::DevVarStringArray();
		DEBUG_STREAM << "ScientaAcquisition::get_pass_mode_list(): entering... !" << endl;

		int max =0;
		ses->getProperty("element_set_count",0,&max);
		argout->length(max);

		for(int i=0; i<max;i++)
		{
			char* set = 0;
			int size  = 0;
			int err = ses->getProperty("element_set_from_index", i, set, size);
			if(err!=0){
				string msg = WError::instance()->message(err);
				Tango::Except::throw_exception (
					(const char *)"DRIVER_FAILURE",
					(const char *) msg.c_str(),
					(const char *)"ScientaAcquisition::get_pass_mode_list");
			}
			set =  new char[size];
			err = ses->getProperty("element_set_from_index",i,set, size);
			if(err!=0){
				delete [] set;
				string msg = WError::instance()->message(err);
				Tango::Except::throw_exception (
					(const char *)"DRIVER_FAILURE",
					(const char *) msg.c_str(),
					(const char *)"ScientaAcquisition::get_pass_mode_list");
			}
			(*argout)[i] = CORBA::string_dup(set);
			delete [] set;
		}
		return argout;
	}





	//+------------------------------------------------------------------
	/**
	*	method:	ScientaAcquisition::get_pass_energy_list
	*
	*	description:	method to execute "GetPassEnergyList"
	*
	* @return	The list of possible pass energies
	*
	*/
	//+------------------------------------------------------------------
	Tango::DevVarDoubleArray *ScientaAcquisition::get_pass_energy_list()
	{
		//	POGO has generated a method core with argout allocation.
		//	If you would like to use a static reference without copying,
		//	See "TANGO Device Server Programmer's Manual"
		//		(chapter : Writing a TANGO DS / Exchanging data)
		//------------------------------------------------------------
		Tango::DevVarDoubleArray	*argout  = new Tango::DevVarDoubleArray();

		DEBUG_STREAM << "ScientaAcquisition::get_pass_energy_list(): entering... !" << endl;

		int max =0;
		ses->getProperty("pass_energy_count",0,&max);
		DEBUG_STREAM << "get_pass_energy_list - max " << max << endl;
		argout->length(max);
		for(int i=0; i<max;i++)
		{
			double passE = 0;
			ses->getProperty("pass_energy_from_index",i,&passE);
			DEBUG_STREAM << "get_pass_energy_list - passE " << passE << endl;
			(*argout)[i] = passE;
		}
		return argout;
	}


}	//	namespace
