
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, electronAnalyser.edl, P=$(P),R=$(R)

# Units used on x axis of collected data
record(stringin, "$(P)$(R)X_UNITS_RBV")
{
  field(DESC, "X Axis Units")
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn($(PORT) 0)ACQ_CHANNEL_UNIT")
  field(SCAN, "I/O Intr")
}

# Units used on y axis of collected data
record(stringin, "$(P)$(R)Y_UNITS_RBV")
{
  field(DESC, "Y Axis Units")
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn($(PORT) 0)ACQ_INTENSITY_UNIT")
  field(SCAN, "I/O Intr")
}

# User enters desired number of slices
record(longout, "$(P)$(R)SLICES") 
{
  field(DESC, "Number of slices")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)DETECTOR_SLICES")
  field(PINI, "YES")
  field(VAL,  "10")
  field(DRVL, "1")
  field(DRVH, "1000")
}

# Report back current number of slices used
record(longin, "$(P)$(R)SLICES_RBV") 
{
  field(DESC, "Number of slices Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)DETECTOR_SLICES")
  field(SCAN, "I/O Intr")
}

########## Disable Redundant areaDetector Fields #########

record(longout, "$(P)$(R)BinX")
{
  field(DISA, "1")
}

record(longin, "$(P)$(R)BinX_RBV")
{
  field(DISA, "1")
}

record(longout, "$(P)$(R)BinY")
{
  field(DISA, "1")
}

record(longin, "$(P)$(R)BinY_RBV")
{
  field(DISA, "1")
}

record(ao, "$(P)$(R)Gain")
{
  field(DISA, "1")
}

record(ai, "$(P)$(R)Gain_RBV")
{
  field(DISA, "1")
}

record(bo, "$(P)$(R)ReverseX")
{
  field(DISA, "1")
}

record(bo, "$(P)$(R)ReverseY")
{
  field(DISA, "1")
}

######################## Modes ########################### 

# Selecr data acquisition mode
record(mbbo, "$(P)$(R)ACQ_MODE")
{
  field(DESC, "Acquisition Mode")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)ACQUISITION_MODE")
  field(ZRST, "Swept")
  field(ZRVL, "0")
  field(ONST, "Fixed")
  field(ONVL, "1")
  field(PINI, "YES")
  field(VAL,  "0")
  field(FLNK, "$(P)$(R)ACQ_MODE_CALC")
}

# Report back current acquisition mode
record(mbbi, "$(P)$(R)ACQ_MODE_RBV")
{
  field(DESC, "Acquisition Mode Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)ACQUISITION_MODE")
  field(SCAN, "I/O Intr")
  field(ZRST, "Swept")
  field(ZRVL, "0")
  field(ONST, "Fixed")
  field(ONVL, "1")
}

# Only trigger the energy fields to reprocess
# when swept mode is selected (acq mode = 0)
record(calcout, "$(P)$(R)ACQ_MODE_CALC")
{
  field(DESC, "Trigger in swept mode")
  field(CALC, "A")
  field(PINI, "YES")
  field(INPA, "$(P)$(R)ACQ_MODE")
  field(OUT,  "$(P)$(R)ACQ_MODE_PROCESS PP")
  field(OOPT, "When Zero")
}

# Trigger the energy fields to reprocess
# to ensure that swept mode values aren't
# lost when switching acquisition modes
record(fanout, "$(P)$(R)ACQ_MODE_PROCESS")
{
  field(DESC, "Acq Mode Fanout")
  field(SELM, "All")
  field(SELL, "1")
  field(LNK1, "$(P)$(R)LOW_ENERGY.PROC")
  field(LNK2, "$(P)$(R)HIGH_ENERGY.PROC")
  field(LNK3, "$(P)$(R)STEP_SIZE.PROC")
}

# Select energy mode
record(mbbo, "$(P)$(R)ENERGY_MODE")
{
  field(DESC, "Energy Mode")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)ENERGY_MODE")
  field(ZRST, "Binding")
  field(ZRVL, "0")
  field(ONST, "Kinetic")
  field(ONVL, "1")
  field(PINI, "YES")
  field(VAL,  "1")
}

# Report back current energy mode
record(mbbi, "$(P)$(R)ENERGY_MODE_RBV")
{
  field(DESC, "Energy Mode Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)ENERGY_MODE")
  field(SCAN, "I/O Intr")
  field(ZRST, "Binding")
  field(ZRVL, "0")
  field(ONST, "Kinetic")
  field(ONVL, "1")
}

# Select lens mode
record(mbbo, "$(P)$(R)LENS_MODE") 
{
  field(DESC, "Lens Mode")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)LENS_MODES")
  field(PINI, "YES")
  field(VAL,  "0")  
}

# Report back current lens mode
record(mbbi, "$(P)$(R)LENS_MODE_RBV") 
{
  field(DESC, "Lens Mode Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)LENS_MODES")
  field(SCAN, "I/O Intr")
}

# Select detector mode
record(mbbo, "$(P)$(R)DETECTOR_MODE")
{
  field(DESC, "Detector Mode")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)DETECTOR_MODE")
  field(ZRST, "Pulse Counting")
  field(ZRVL, "0")
  field(ONST, "ADC")
  field(ONVL, "1")
  field(PINI, "YES")
  field(VAL,  "1")
}

# Report back current detector mode
record(mbbi, "$(P)$(R)DETECTOR_MODE_RBV")
{
  field(DESC, "Dectector Mode Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)DETECTOR_MODE")
  field(SCAN, "I/O Intr")
  field(ZRST, "Pulse Counting")
  field(ZRVL, "0")
  field(ONST, "ADC")
  field(ONVL, "1")
}

###################### Energy (eV) ########################

# Select pass energy
record(mbbo, "$(P)$(R)PASS_ENERGY") 
{
  field(DESC, "Pass Energy")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)PASS_ENERGY")
  field(PINI, "YES")
  field(VAL,  "0")  
}

# Report back current pass energy
record(mbbi, "$(P)$(R)PASS_ENERGY_RBV") 
{
  field(DESC, "Pass Energy Readback")
  field(DTYP, "asynInt32")
  field(SCAN, "I/O Intr")
  field(INP,  "@asyn($(PORT) 0)PASS_ENERGY")
}

# User enters desired low energy value
record(ao, "$(P)$(R)LOW_ENERGY") 
{
  field(DESC, "Low Energy")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT) 0)LOW_ENERGY")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "82")
}

# Report back current low energy value
record(ai, "$(P)$(R)LOW_ENERGY_RBV") 
{
  field(DESC, "Low Energy Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT) 0)LOW_ENERGY")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
  field(FLNK, "$(P)$(R)ENERGY_WIDTH_RBV")
}

# User enters desired centre energy
record(ao, "$(P)$(R)CENTRE_ENERGY") 
{
  field(DESC, "Centre Energy")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT) 0)CENTER_ENERGY")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "84")
}

# Report back current centre energy
record(ai, "$(P)$(R)CENTRE_ENERGY_RBV") 
{
  field(DESC, "Centre Energy Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT) 0)CENTER_ENERGY")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
}

# User enters desired high energy
record(ao, "$(P)$(R)HIGH_ENERGY") 
{
  field(DESC, "High Energy")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT) 0)HIGH_ENERGY")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "86")
}

# Report back current high energy
record(ai, "$(P)$(R)HIGH_ENERGY_RBV") 
{
  field(DESC, "High Energy Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT) 0)HIGH_ENERGY")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
  field(FLNK, "$(P)$(R)ENERGY_WIDTH_RBV")
}

# Calculate the energy width from the
# the high and low energy values
record(calc, "$(P)$(R)ENERGY_WIDTH_RBV")
{
  field(DESC, "Calculated energy width")
  field(SCAN, "Passive")
  field(CALC, "B-A")
  field(INPA, "$(P)$(R)LOW_ENERGY_RBV")
  field(INPB, "$(P)$(R)HIGH_ENERGY_RBV")
  field(PREC, "3")
}

# User enters desired excitation energy
record(ao, "$(P)$(R)EXCITATION_ENERGY") 
{
  field(DESC, "Excitation Energy")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT) 0)EXCITATION_ENERGY")
  field(PREC, "3")
  field(PINI, "YES")
  field(VAL,  "10")
}

# Report back current excitation energy
record(ai, "$(P)$(R)EXCITATION_ENERGY_RBV") 
{
  field(DESC, "Excitation Energy Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT) 0)EXCITATION_ENERGY")
  field(SCAN, "I/O Intr")
  field(PREC, "3")
}

###################### Step ########################

# User enters desired energy step size
record(ao, "$(P)$(R)STEP_SIZE") 
{
  field(DESC, "Energy Step Size")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT) 0)ENERGY_STEP")
  field(PREC, "5")
  field(PINI, "YES")
  field(VAL,  "0.2")
}

# Report back current energy step size
record(ai, "$(P)$(R)STEP_SIZE_RBV") 
{
  field(DESC, "Energy Step Size Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT) 0)ENERGY_STEP")
  field(SCAN, "I/O Intr")
  field(PREC, "5")
}

# User enters desired number of frames
#record(ao, "$(P)$(R)FRAMES") 
#{
#  field(DESC, "Frames Demand")
#  field(OUT,  "$(P)$(R)FRAMES_CALC PP")
#  field(DRVL, "1")
#  field(DRVH, "100000")
#  field(PINI, "YES")
#  field(VAL,  "15")
#}

# User enters desired number of frames
record(longout, "$(P)$(R)FRAMES") 
{
  field(DESC, "Frames Demand")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)FRAMES")
  field(DRVL, "1")
  field(DRVH, "100000")
  field(PINI, "YES")
  field(VAL,  "1")
}

# User enters desired number of frames
record(longin, "$(P)$(R)FRAMES_RBV") 
{
  field(DESC, "Frames Demand Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)FRAMES")
  field(SCAN, "I/O Intr")
}

# Report back the maximum camera frame rate
record(longin, "$(P)$(R)MAX_FRAMES_RBV") 
{
  field(DESC, "Max Frames Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)FRAME_RATE")
  field(SCAN, "I/O Intr")
}

# Calculate time from frame rate
#record(calcout, "$(P)$(R)FRAMES_CALC")
#{
#  field(DESC, "Calculate time from frames")
#  # Condition set in calc to avoid initialisation with zero
#  field(CALC, "A/((B=0)?30.0:B)")
#  field(INPA, "$(P)$(R)FRAMES")
#  field(INPB, "$(P)$(R)MAX_FRAMES_RBV")
## field(OUT,  "$(P)$(R)STEP_TIME PP")
#  field(OUT,  "$(P)$(R)AcquireTime PP")
#}

## User enters desired step time
record(ao, "$(P)$(R)STEP_TIME")
{
  field(DESC, "Step time demand")
  field(OUT,  "$(P)$(R)AcquireTime PP")
  field(PINI, "YES")
  field(DRVL, "0.0333333")
  field(DRVH, "333.333")
#  field(FLNK, "$(P)$(R)STEP_TIME_CALC")
  field(PREC, "5")
}

## Calculate frames from step time
#record(calcout, "$(P)$(R)STEP_TIME_CALC")
#{
#  field(DESC, "Calculate frames")
#  # Condition set in calc to avoid initialisation with zero
#  field(CALC, "A*((B=0)?30.0:B)")
## field(INPA, "$(P)$(R)STEP_TIME")
#  field(INPA, "$(P)$(R)AcquireTime CP")
#  field(INPB, "$(P)$(R)MAX_FRAMES_RBV")
#  field(OUT,  "$(P)$(R)FRAMES PP")
#}

#record(calcout, "$(P)$(R)STEP_TIME_SET") 
#{
#  field(DESC, "Set time")
#  field(CALC, "A")
#  field(OUT,  "$(P)$(R)AcquireTime PP")
#  field(INPA, "$(P)$(R)STEP_TIME")
#  field(FLNK, "$(P)$(R)STEP_TIME_CALC")
#}

################## Element Sets ####################

# Available element sets
record(mbbo, "$(P)$(R)ELEMENT_SET")
{
  field(DESC, "Element Set")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)ELEMENT_SETS")
# No need for pini as element set read from ini
# field(PINI, "YES")
# field(VAL,  "0")
}

# Currently selected element set
record(mbbi, "$(P)$(R)ELEMENT_SET_RBV")
{
  field(DESC, "Element Set Readback")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)ELEMENT_SETS")
  field(SCAN, "I/O Intr")
}

################## Acquired Data ####################

# Acquired integrated spectrum of data
record(waveform, "$(P)$(R)INT_SPECTRUM")
{
  field(DESC, "Integrated Spectrum")
  field(DTYP, "asynFloat64ArrayIn")
  field(INP,  "@asyn($(PORT) 0)ACQ_SPECTRUM")
  field(SCAN, "I/O Intr")
  field(FTVL, "DOUBLE")
  field(NELM, "5000000")
}

# Acquired integrated spectrum copy of data
record(waveform, "$(P)$(R)INT_SPECTRUM_COPY")
{
  field(DESC, "Integrated Spectrum Copy")
  field(DTYP, "asynFloat64ArrayIn")
  field(INP,  "@asyn($(PORT) 0)ACQ_SPECTRUM_COPY")
  field(SCAN, "I/O Intr")
  field(FTVL, "DOUBLE")
  field(NELM, "5000000")
}

# Acquired image of data
record(waveform, "$(P)$(R)IMAGE")
{
  field(DESC, "Acquired Image")
  field(DTYP, "asynFloat64ArrayIn")
  field(INP,  "@asyn($(PORT) 0)ACQ_IMAGE")
  field(SCAN, "I/O Intr")
  field(FTVL, "DOUBLE")
  field(NELM, "5000000")
}

# Acquired external IO data
record(waveform, "$(P)$(R)EXTIO")
{
  field(DESC, "External IO Data")
  field(DTYP, "asynFloat64ArrayIn")
  field(INP,  "@asyn($(PORT) 0)ACQ_IO_DATA")
  field(SCAN, "I/O Intr")
  field(FTVL, "DOUBLE")
  field(NELM, "5000000")
}

# Acquired external IO data copy
record(waveform, "$(P)$(R)EXTIO_COPY")
{
  field(DESC, "External IO Data Copy")
  field(DTYP, "asynFloat64ArrayIn")
  field(INP,  "@asyn($(PORT) 0)ACQ_IO_DATA_COPY")
  field(SCAN, "I/O Intr")
  field(FTVL, "DOUBLE")
  field(NELM, "5000000")
}

################## Region Name #####################

record(waveform, "$(P)$(R)REGION_NAME")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT) 0)REGION_NAME")
    field(FTVL, "CHAR")
    field(NELM, "40")
}

record(waveform, "$(P)$(R)REGION_NAME_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT) 0)REGION_NAME")
    field(FTVL, "CHAR")
    field(NELM, "40")
    field(SCAN, "I/O Intr")
}

################## Progress ######################

# Progress of data collection in percent
record(ai, "$(P)$(R)PROGRESS_RBV") 
{
  field(DESC, "Data Acq Progress")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)PERCENT_COMPLETE")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
  field(EGU,  "%")
}

# Progress of data collection in percent
record(ai, "$(P)$(R)REGION_PROGRESS_RBV") 
{
  field(DESC, "Region Progress")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)REGION_PERCENT_COMPLETE")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
  field(EGU,  "%")
}

record(ai, "$(P)$(R)NUM_CHANNELS_RBV") 
{
  field(DESC, "Number of Channels")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)NUM_CHANNELS")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
}

# Number of current point being collected
record(ai, "$(P)$(R)CURRENT_CHANNEL_RBV") 
{
  field(DESC, "Current Acq Channel")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)CURRENT_CHANNEL")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
}

# Number of current point in a region being collected
record(ai, "$(P)$(R)CURRENT_POINT_RBV") 
{
  field(DESC, "Current Point")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)CURRENT_POINT")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
}

# Number of current data point being collected
record(ai, "$(P)$(R)CURRENT_DATA_POINT_RBV") 
{
  field(DESC, "Current Data Point")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)CURRENT_DATA_POINT")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
}

# Total number of data points in iteration
record(ai, "$(P)$(R)TOTAL_DATA_POINTS_RBV") 
{
  field(DESC, "Total Data Points")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)TOTAL_DATA_POINTS")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
}

# Number of current lead point being collected
record(ai, "$(P)$(R)CURRENT_LEAD_POINT_RBV") 
{
  field(DESC, "Current Lead Point")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)CURRENT_LEAD_POINT")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
}

# Total number of lead points in iteration
record(ai, "$(P)$(R)TOTAL_LEAD_POINTS_RBV") 
{
  field(DESC, "Total Lead Points")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)TOTAL_LEAD_POINTS")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
}

# Total number of data points to be 
# collected during acquisition
record(ai, "$(P)$(R)TOTAL_POINTS_RBV") 
{
  field(DESC, "Total Acq Points")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)TOTAL_POINTS")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
}

# Total number of data points to be 
# collected within an iteration
record(ai, "$(P)$(R)TOTAL_POINTS_ITERATION_RBV") 
{
  field(DESC, "Total Iteration Acq Points")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)TOTAL_POINTS_ITERATION")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
}

# Marks whether data is leading in or not
# 0 = Real Data, 1 = Leading In
record(ai, "$(P)$(R)LEADING_IN_RBV") 
{
  field(DESC, "Leading In State")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)LEADING_IN")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
}

# Report back predicted iteration acquisition time
record(ai, "$(P)$(R)TOTAL_TIME_RBV") 
{
  field(DESC, "Total Time Readback")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT) 0)TOTAL_TIME")
  field(SCAN, "I/O Intr")
  field(PREC, "1")
  field(EGU,  "secs")
}

# Report back estimated region time left
record(ai, "$(P)$(R)REGION_TIME_LEFT_RBV") 
{
  field(DESC, "Region Time Left")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT) 0)REGION_TIME_LEFT")
  field(SCAN, "I/O Intr")
  field(PREC, "1")
  field(EGU,  "secs")
}

# Report back estimated total time left
record(ai, "$(P)$(R)TOTAL_TIME_LEFT_RBV") 
{
  field(DESC, "Total Time Left")
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT) 0)TOTAL_TIME_LEFT")
  field(SCAN, "I/O Intr")
  field(PREC, "1")
  field(EGU,  "secs")
}

# Calculate total time for all iterations
record(calcout, "$(P)$(R)TOTAL_ACQ_TIME_RBV")
{
  field(DESC, "Calculate total time")
  field(CALC, "A*B")
  field(INPA, "$(P)$(R)TOTAL_TIME_RBV CP")
  field(INPB, "$(P)$(R)NumExposures_RBV CP")
  field(EGU,  "secs")
  field(PREC, "1")
}

# Reset power supplies to zero
record(longout, "$(P)$(R)ZERO_SUPPLIES") 
{
  field(DESC, "Zero the power supplies")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)ZERO_SUPPLIES")
  field(PINI, "NO")
  field(VAL,  "0")
  field(DRVL, "0")
  field(DRVH, "1")
}

# Force zero set of supplies after end of acquisition
#record(calcout, "$(P)$(R)CALC_FORCE_ZERO")
#{
#  field(DESC, "Force supplies to zero")
#  field(CALC, "A=1?0:1")
#  field(INPA, "$(P)$(R)DetectorState_RBV CP")
#  field(OOPT, "Transition To Non-zero")
#  field(OUT,  "$(P)$(R)SEQ_FORCE_ZERO.PROC PP")
#}

#record(seq, "$(P)$(R)SEQ_FORCE_ZERO")
#{
#  field(DESC, "Force supplies to zero")
#  field(SELM, "All")
#  field(DLY1, "2.0")
#  field(DOL1, "1")
#  field(LNK1,  "$(P)$(R)ZERO_SUPPLIES PP")
#}

# Pause or resume the acquisition
record(longin, "$(P)$(R)PAUSE_RBV") 
{
  field(DESC, "Is the acquisition paused")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)PAUSE_ACQUISITION")
  field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)PAUSE") 
{
  field(DESC, "Pause the acquisition")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)PAUSE_ACQUISITION")
  field(PINI, "NO")
  field(VAL,  "0")
  field(DRVL, "0")
  field(DRVH, "1")
}
